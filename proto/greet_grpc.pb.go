// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/greet.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeepakGreeter_SayHelloToDeepak_FullMethodName = "/deepak_greet_service.deepak_greeter/SayHelloToDeepak"
)

// DeepakGreeterClient is the client API for DeepakGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeepakGreeterClient interface {
	SayHelloToDeepak(ctx context.Context, in *DeepakHelloRequest, opts ...grpc.CallOption) (*DeepakHelloResponse, error)
}

type deepakGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewDeepakGreeterClient(cc grpc.ClientConnInterface) DeepakGreeterClient {
	return &deepakGreeterClient{cc}
}

func (c *deepakGreeterClient) SayHelloToDeepak(ctx context.Context, in *DeepakHelloRequest, opts ...grpc.CallOption) (*DeepakHelloResponse, error) {
	out := new(DeepakHelloResponse)
	err := c.cc.Invoke(ctx, DeepakGreeter_SayHelloToDeepak_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeepakGreeterServer is the server API for DeepakGreeter service.
// All implementations must embed UnimplementedDeepakGreeterServer
// for forward compatibility
type DeepakGreeterServer interface {
	SayHelloToDeepak(context.Context, *DeepakHelloRequest) (*DeepakHelloResponse, error)
	mustEmbedUnimplementedDeepakGreeterServer()
}

// UnimplementedDeepakGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedDeepakGreeterServer struct {
}

func (UnimplementedDeepakGreeterServer) SayHelloToDeepak(context.Context, *DeepakHelloRequest) (*DeepakHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloToDeepak not implemented")
}
func (UnimplementedDeepakGreeterServer) mustEmbedUnimplementedDeepakGreeterServer() {}

// UnsafeDeepakGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeepakGreeterServer will
// result in compilation errors.
type UnsafeDeepakGreeterServer interface {
	mustEmbedUnimplementedDeepakGreeterServer()
}

func RegisterDeepakGreeterServer(s grpc.ServiceRegistrar, srv DeepakGreeterServer) {
	s.RegisterService(&DeepakGreeter_ServiceDesc, srv)
}

func _DeepakGreeter_SayHelloToDeepak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeepakHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeepakGreeterServer).SayHelloToDeepak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeepakGreeter_SayHelloToDeepak_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeepakGreeterServer).SayHelloToDeepak(ctx, req.(*DeepakHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeepakGreeter_ServiceDesc is the grpc.ServiceDesc for DeepakGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeepakGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deepak_greet_service.deepak_greeter",
	HandlerType: (*DeepakGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHelloToDeepak",
			Handler:    _DeepakGreeter_SayHelloToDeepak_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/greet.proto",
}
